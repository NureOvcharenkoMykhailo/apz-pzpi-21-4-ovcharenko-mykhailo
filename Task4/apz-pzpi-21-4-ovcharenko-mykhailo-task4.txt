1 МЕТА РОБОТи

Розробка клієнтської частини проєкту за темою: «Програмна система для автоматизації процесів створення дієт».

2 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Основними користувачами системи є 3 типи акторів: клієнти, менеджери та адміністратори.
Потреби клієнта: можливість перегляду дієт, можливість перегляду планів харчування, можливість перегляду записаної інформації користувача.
Потреби менеджера: можливість додавати, редагувати та видаляти продукти; можливість додавати, редагувати та видаляти дієти; можливість додавати та видаляти плани харчування.
Потреби адміністратора: можливість налаштування HTTP-адреси та порту сервера, можливість створювати резервні копії та відновлювати систему до певного стану.
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів.
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання клієнтської частини системи було обрано мову програмування TypeScript використовуючи технологію Sveltekit.
Для реалізації елементів інтерфейсу було використано бібліотеку Flowbite Svelte.
Для реалізації локалізації інтерфейсу було використано модуль i18n.ts.
Для зв'язку з API був розроблений модуль для виправляння запитів і обробки відповідей на основі fetch.
Для більш детальної візуалізації використаних компонентів було розроблено діаграму компонентів. Для візуалізації використаних пакетів було розроблено діаграму пакетів.
Для більш детальної візуалізації взаємодії станів користувачів у клієнтській частині системи було розроблено діаграму станів.
Таким чином, за допомогою діаграм пакетів, розгортання та станів було визначено основні технології та архітектуру системи.

4 ВИСНОВКИ 

Під час виконання лабораторної роботи отримав навички з проєктування клієнтської частини програмної системи. Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням Sveltekit. При розробці продукту дотримувались вимоги до чистого коду мови програмування TypeScript, використовуючи компонентну архітектуру.
