1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Веб-сервер створено за допомогою фреймворку Django, який значно спрощує створення REST API, надаючи безліч інструментів, таких як: ORM для управління базою даних з системою міграції, що забезпечує цілісність таблиць бази даних; сторінка адміністратора для полегшення тестування бази даних.
Для бази даних було обрано MySQL через її простоту та можливість легкої міграції на іншу базу даних. Це також єдина доступна база даних для обраного хостингу PlanetScale.
Архітектура системи базується на основних принципах з книги Роберта Сесіла Мартіна "Чистий код". Вона розділена на різні модулі: API, адмінку та основну частину. Використовується написаний на замовлення модуль управління поданнями, який мінімізує повторення коду при створенні кінцевих точок.
Вибрана архітектура дала змогу ефективно розподілити відповідальність між різними компонентами системи, забезпечуючи їх модульність і можливість взаємодії без зайвих залежностей. Кожен проєкт був організований так, щоб мати чітку структуру та бути відокремленим від інших, що сприяло підтримці, розширенню та розвитку системи в майбутньому.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання ілюструє, як елементи або компоненти системи розміщуються на апаратному забезпеченні та як вони взаємодіють між собою. Використовуючи діаграму розгортання, розробники можуть зрозуміти, як програмне забезпечення взаємодіє з обладнанням, а також визначити вимоги до виконавчого середовища.
Система використовує сервер баз даних MySQL через TCP/IP, який планується розмістити на сервісі PlanetScale.
Веб-сервер створено з використанням фреймворків Django та Django REST, він працює на інтерпретаторі CPython і обробляє HTTP-запити за допомогою WSGI - угоди про виклик веб-серверів для пересилання запитів до веб-додатків, написаних на Python. Він має ефективні математичні методи обробки користувацьких даних та можливість створення резервних копій користувацьких даних.
Веб-браузер використовує JavaScript фреймворк Svelte.js, який взаємодіє з сервером за допомогою REST API через HTTPS. Він містить як клієнтську частину, так і панель адміністратора.
Мобільний пристрій написаний на Kotlin з використанням Jetpack Android. Він зв'язується з сервером за допомогою REST API через HTTPS.
Пристрій інтернету речей написаний на C. Він зв'язується з сервером за допомогою REST API через HTTPS.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для створення серверної частини системи було вибрано мову програмування Python, використовуючи технологію Django Framework.
Як базу даних було обрано MySQL, для взаємодії з нею з боку серверного додатку використовується Django ORM. Ця технологія надає зручний інтерфейс для роботи з базами даних у формі об'єктів сутностей.
Використані технології відображено на діаграмі розгортання.
Система складається із п'яти складових: веб-інтерфейсу, веб-сервера, бази даних, мобільного пристрою та ІоТ. На веб-сервері знаходиться серверна частина продукту, яка виконує основну бізнес-логіку. Веб-додаток надає користувачам доступ до інтерфейсу системи. Мобільний додаток дозволяє взаємодіяти з системою для перегляду інформації та навігації на місці відпочинку. Інтернет речей забезпечує безпеку та спрощує навігацію під час відпочинку. Архітектура серверного застосунку представлена на діаграмі пакетів.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Основними користувачами системи є 3 типи акторів: клієнти, менеджери, адміністратори.
Потреби клієнта: можливість переглядати доступні продукти та їхню поживну цінність, можливість створювати або обирати план харчування, можливість отримувати додаткові функції, такі як власні джерела даних; можливість отримувати персональні рекомендації.
Потреби менеджера: можливість керувати списками продуктів, можливість змінювати та перевіряти поживну цінність продуктів, можливість переглядати статистику різних дієт та їх популярність, можливість затверджувати або відхиляти запити на доповнення дієт.
Потреби адміністратора: можливість переглядати та контролювати користувачів системи, можливість переглядати та керувати продуктами харчування, можливість переглядати та керувати дієтами, можливість керувати глобальними джерелами даних, можливість створювати та відновлювати резервні копії, можливість призначати та відкликати менеджерів.
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів.
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

5 ПОБУДОВА ER-ДІАГРАМИ

Для проєктування бази даних було розроблено ER-модель даних. Вона складається з сіми таблиць: дієта, їжа, план харчування, харчова цінність, профіль, подання, користувач.
У базі даних наявні наступні зв’язки між сутностями:
— користувач та профіль мають зв’язок один до одного, бо один користувач може мати тільки один профіль;
— користувач та подання мають зв’язок один до багатьох, бо один користувач може мати декілька подань;
— профіль та харчова цінність мають зв’язок один до одного, бо один профіль може мати тільки одну харчову цінність;
— дієта та профіль мають зв’язок один до багатьох, бо одна дієта може мати декілька профілів;
— дієта та план харчування мають зв’язок один до багатьох, бо одна дієта може мати декілька планів харчування;
— план харчування та їжа мають зв’язок один до багатьох, бо один план харчування може мати декілька їж;
— їжа та харчова цінність мають зв’язок один до одного, бо одна їжа може мати тільки одну харчову цінність.

6 СПЕЦИФІКАЦІЯ REST

REST API містить 28 кінцевих точок, кожна з яких відповідає за надання даних та виконання бізнес-логіки. Специфікація REST наведена в таблиці.

Кінцева точка
Ролі доступу
Метод HTTP
Призначення
{lang}/account/register
Звичайний
користувач
POST
Реєстрація облікового запису
{lang}/account/login
Звичайний
користувач
POST
Вхід у обліковий запис
{lang}/account/delete/{query}
Менеджер
DELETE
Видалення облікового запису
{lang}/account/query/{query}
Звичайний
користувач
GET
Запит на обліковий запис
{lang}/account/all/{query}
Звичайний
користувач
GET
Усі облікові записи
{lang}/account/edit
Клієнт
POST
Редагування облікового запису
{lang}/account/profile/{query}
Звичайний
користувач
GET
Профіль облікового запису
{lang}/food/create
Менеджер
POST
Створення їжі
{lang}/food/query/{query}
Звичайний
користувач
GET
Запит на їжу
{lang}/food/all/{query}
Звичайний
користувач
GET
Усі страви
{lang}/food/delete/{query}
Менеджер
DELETE
Видалення їжі
{lang}/food/edit
Менеджер
POST
Редагування їжі
{lang}/submission/create
Клієнт
POST
Створення подання
{lang}/submission/query/{query}
Звичайний
користувач
GET
Запит на подання
{lang}/submission/all/{query}
Звичайний
користувач
GET
Усі подання
{lang}/submission/delete/{query}
Клієнт
DELETE
Видалення подання
{lang}/submission/edit
Клієнт
POST
Редагування подання
{lang}/diet/create
Менеджер
POST
Створення дієти
{lang}/diet/query/{query}
Звичайний
користувач
GET
Запит на дієту
{lang}/diet/all/{query}
Звичайний
користувач
GET
Усі дієти
{lang}/diet/edit
Менеджер
DELETE
Редагування дієти
{lang}/diet/delete/{query}
Менеджер
POST
Видалення дієти
{lang}/mealplan/create
Менеджер
POST
Створення раціону
{lang}/mealplan/query/{query}
Звичайний
користувач
GET
Запит на раціон
{lang}/mealplan/all/{query}
Звичайний
користувач
GET
Усі раціони
{lang}/mealplan/delete/{query}
Менеджер
DELETE
Видалення раціону
{lang}/system/backup/{query}
Адміністратор
GET
Резервне копіювання системи
{lang}/system/rollback
Адміністратор
POST
Повернення системи до іншого стану
{lang}/iot/update
Клієнт
POST
Оновлення данних із IoT пристрою

Отже, через використання таблиці специфікації REST були визначені основні кінцеві точки для виконання запитів до розробленого серверного застосунку.

7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Було виділено основні пакети, до яких відносяться: контролери (Views), маршрутизатори (Routers), сервіси (Services), репозиторії (Repositories), міграції (Migrations) та сервіс PlanetScale для розміщення бази даних.
Подання використовують з'єднання "злиття", маршрути використовують з'єднання "злиття", сервіси використовують з'єднання "злиття", сховища використовують з'єднання "злиття", міграції використовують з'єднання "злиття", PlanetScale використовує з'єднання "використання".

ВИСНОВКИ

Під час виконання лабораторної роботи я отримав практичний досвід у проектуванні серверної складової програмного забезпечення, розробці сценаріїв використання, створенні діаграм розгортання та пакетів, а також у проектуванні баз даних. Я також реалізував серверну складову програмної системи, дотримуючись принципів чистого коду в мові програмування Python.
